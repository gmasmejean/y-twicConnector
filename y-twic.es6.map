{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/twicConnector.js"],"names":[],"mappingsfile":"y-twic.es6","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nfunction extend (Y) {\n    class twicConnector extends Y.AbstractConnector {\n        constructor (y, options) {\n            if (options === undefined) {\n                throw new Error('Options must not be undefined!');\n            }\n            else if ( !options.room ) {\n                throw new Error('You must define a room name!');\n            }\n            else if( !options.socket ){\n                throw new Error('You have to set a websocket object');\n            }\n            else if( !options.user_id ){\n                throw new Error('You have to define user id');\n            }\n\n            options.role = 'slave';\n            super(y, options);\n\n            console.log('yTwic - CONSTRUCTOR', y, options, this);\n\n            var socket = options.socket,\n                self = this;\n\n            self._socket = options.socket;\n            self._room = options.room;\n            self._user_id = options.user_id;\n\n            self.setUserId(options.user_id);\n\n            // DEFINE EVENTS HANDLERS\n            // WHEN A PEER JOIN THE ROOM.\n            this._onNewPeer = function( data ){\n                console.log('NEWPEER', data , self._user_id );\n                if( data.user_id != self._user_id ){\n                    socket.emit('yjs_roommember', {room:self._room, id:self._user_id, to: data.user_id } );\n                    self.userJoined( data.user_id, 'master');\n                }\n            };\n            // WHEN A PEER LEAVE THE ROOM.\n            this._onOldPeer = function( data ){\n                console.log('OLDPEER', data, self._user_id );\n                self.userLeft(data.user_id);\n            };\n            // AFTER WE JOINED THE ROOM, EACH PEER TELL US THEY'RE IN...\n            this._onPrevPeer = function(data){\n                console.log('PREVPEER', data , self._user_id );\n                self.userJoined( data.user_id, 'master');\n            };\n            // ON MESSAGE\n            this._onMessage = function( data ){\n                console.log('YMESSAGE', data, self._user_id );\n                if( data.user_id != self._user_id ){\n                    self.receiveMessage( data.user_id, data.message );\n                }\n            };\n            // WHEN SOCKET RECONNECT & IS AUTHENTICATED\n            this._onAuth = function(){\n                self.reconnect();\n            };\n\n            // BIND EVENTS\n            socket.on('yjs_'+options.room+'_newpeer', this._onNewPeer);\n            socket.on('yjs_'+options.room+'_oldpeer', this._onOldPeer);\n            socket.on('yjs_'+options.room+'_prevpeer', this._onPrevPeer);\n            socket.on('yjs_'+options.room+'_message', this._onMessage);\n            socket.on('authenticated', this._onAuth);\n\n            // JOIN YJS ROOM\n            socket.emit( 'yjs_joinroom', {room:options.room, id:options.user_id} );\n\n            // WHEN SOCKET IS DISCONNECTED -> DISCONNECT \n            socket.on('disconnect', function(){\n                self.disconnect();\n            });\n        }\n        destroy(){\n            // UNBIND EVENTS\n            this._socket.off('yjs_'+this._room+'_newpeer', this._onNewPeer);\n            this._socket.off('yjs_'+this._room+'_oldpeer', this._onOldPeer);\n            this._socket.off('yjs_'+this._room+'_prevpeer', this._onPrevPeer);\n            this._socket.off('yjs_'+this._room+'_message', this._onMessage);\n            this._socket.off('authenticated', this._onAuth );\n\n            this.disconnect();\n        }\n        disconnect () {\n            console.log('yTwic - DISCONNECT', arguments, this );\n            this._socket.emit('yjs_leaveroom',{room:this._room, id:this._user_id});\n            super.disconnect()\n        }\n        reconnect () {\n            console.log( 'yTwic - RECONNECT', arguments, this);\n            this._socket.emit( 'yjs_joinroom', {room:this._room, id:this._user_id} );\n            super.reconnect()\n        }\n        send (uid, message) {\n            console.log('yTwic - SEND', uid, message, this );\n            this._socket.emit('yjs_message',{room:this._room, to: uid, message: message, author:this._user_id});\n        }\n        broadcast (message) {\n            console.log('yTwic - BROADCAST', message, this );\n            this._socket.emit('yjs_message',{room:this._room, message: message, author:this._user_id});\n        }\n        isDisconnected () {\n            return this._socket.disconnected;\n        }\n    }\n    Y.extend('twic', twicConnector);\n}\n\nmodule.exports = extend;\nif (typeof Y !== 'undefined') {\n    extend(Y);\n}\n"]}